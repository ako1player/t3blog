// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role @default(User)
    Post Post[]
    Comment Comment[]
}

model VerificationToken {
    identifier String @id @map("_id")
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    Admin
    User
}

model Category {
    id  String @id @default(cuid()) @map("_id")
    slug String @unique
    title String
    img String?
    Posts Post[]
}

model Post {
    id  String @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    slug String @unique
    title String
    desc String
    img String?
    views Int @default(0)
    catSlug String
    cat Category @relation(fields: [catSlug], references: [slug])
    userEmail String
    user User @relation(fields: [userEmail], references: [email])
    comments Comment[]
}

model Comment {
    id  String @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    desc String
    userEmail String
    user User @relation(fields: [userEmail], references: [email])
    postSlug String
    post Post @relation(fields: [postSlug], references: [slug])
}